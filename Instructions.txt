CS 454 Theory of Computation Fall 2024
Project 1, Due: Oct 15, 2024


The project will be done in teams of two members. Just one submission is required per team.
In addition to the code, please submit a short report that states clearly the contribution of each
member of the team. Submission details will be specified in detail (along with test cases that
shoud be included with the submission) in the canvas submission page. The project will be
graded on (a) correctness on the test cases, (b) meeting the user interface requirements and
(c) stating clearly the pre- and post-conditions, and the input/output relationship for each
function. Around 5% of the total points will be assigned for (b) and (c) each.


The goal of the project is to compute the number of strings w of length n over {a,b,c,d}
with the following property: In any substring of length 6 of w, all three letters a, b, c and d
occur at least once. For example, strings like abbccdaabcasatisfy the property, but a string like
badaabcbcdcabaddoes not satisfy the property since the substring aabcbc does not have a d.
The idea is to create a DFA M for the language:

L= {w |in any substring of length 6 of w, all the letters a, b, c and d occur}.
By definition, all strings of length less than 6 are in L.
The idea behind an eﬃcient solution to this problem is to design a DFA for L and to use
an eﬃcient algorithm to compute the number of strings of length n accepted by a DFA.

The algorithm for the counting the number of strings of a given length accepted by a DFA
is briefly presented below:
Let M= ⟨Q,Σ,δ,0,F⟩be a DFA. Assume that Q= {0,1,···,m−1}and that 0 is the start
state.

 The first step is to construct this DFA. This DFA has hundreds of states so you have
to write a program to build it. The states will encode a buﬀer that holds the last 5 symbols
scanned. When the next input symbol is read, the DFA checks if the last 6 symbols (the five
from the buﬀer and the input read) meets the requirement that all the letters occur at least
once. If this condition is not met, the DFA enters a fail state and thereafter it will remain there.
If the condition is met, then the buﬀer is updated. Initially the buﬀer is empty so the first five
transitions will just fill the buﬀer. Formally, if the current state q encodes a string b1b2···bm
where m<5, then δ(q,a) encodes the state b1b2···bma. If the state pencodes a buﬀer of length
5, say b1b2b3b4b5, then δ(q,a) encodes the state b2b3b4b5a if b1b2b3b4b5a contains at least once
occurrence of each a, b, cand d, else δ(q,a) is the fail state. It is enconvenient to map each buﬀer
string by a positive integer so that the states can be labeled 0, 1, 2, etc. One such encoding is
to use base-4. For example, babca represents the integer 2 ×44 + 43 + 2 ×42 + 3 ×41 + 40
.
The next step is to implement an algorithm that takes as input a DFA M and an integer n
and computes the number of strings of length naccepted by M. This algorithm was presented
and a number of examples were given, including some in quizzes 3 and 4. Specifically, this
algorithm computes Nj(n) = the number of strings of length nfrom any state j to an accepting
state:

The number of strings of length n accepted by a DFA M is given by N0(n). The recurrence
formula for Nj(n) is given as follows: Nj(n) = Σx∈{a,b,c,d}Nδ(j,x)(n−1). Initial values Nj(0)
are given by: Nj(0) = 1 if j ∈F, Nj(0) = 0 if j ̸∈F. Using this recurrence formula, you can
compute Nj(k) for all j for k = 0, 1,···
, n. As we noted in class, you only need to keep two
vectors prev and nextof length mwhere mis the number of states. Using the values of Nj(k)
stored in prev, you can compute Nj(k+ 1) for all 0 ≤j ≤m−1 in next. Then copy next to
prev and repeat.

When your main function is run, it will ask for an integer input n, and will output the number
of strings of length n with the specified property. The range of n will be between 1 and 300.
The answer should be exact, not a floating-point approximation so you should use a language
that supports unlimited precision arithmetic like Java or Python or a library like GMP (in case
of C++).
A test case is included below:
n = 6 Answer: 1560
n = 56 Answer: 1144518781838828768850216